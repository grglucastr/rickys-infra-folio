name: "Terraform Apply AWS Certificate Manager workflow"

on:
  push:
    branches:
      - master

env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_ORGANIZATION }} # repository variable
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE }} # repository variable
  CONFIG_DIRECTORY: "./acm"

jobs:
  terraform:
    if: github.ref == 'refs/heads/master'
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3 
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve -input=false

      - name: Update PR
        uses: actions/github-script@v6
        id: apply-comment
        env:
          PLAN: "Terraform \n${{steps.apply.outputs.stdout}}"
          RAW: "Terraform \n${{steps.apply.outputs}}"
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Apply Output for AWS Certificate Manager
               \`\`\`
               RAW: ${process.env.RAW}
               \`\`\`
               Outputs: ${process.env.PLAN}
               \`\`\`
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });