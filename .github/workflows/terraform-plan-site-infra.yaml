name: "Terraform plan site infrastructure"

on:
  pull_request:
    

env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_ORGANIZATION }} # repository variable
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE }} # repository variable
  CONFIG_DIRECTORY: "./site_infra"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{env.CONFIG_DIRECTORY}}
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3 
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: |
          export TF_VAR_CLOUDFRONT_CERTIFICATE_ARN=arn:aws:sns:us-east-1:123456789012:example-sns-topic-name #placeholder only
          terraform plan
        continue-on-error: true
        
      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        env:
          PLAN: "Terraform \n${{steps.plan.outputs.stdout}}"
          RAW: "Terraform \n${{steps.plan.outputs}}"
          PAYLOAD: "Terraform \n${{steps.plan.outputs.payload}}"
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output for site infrastructure
               \`\`\`
               FROM JSON: ${{steps.plan.outcome}}
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
